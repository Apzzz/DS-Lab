//Sparse matrix

#include<stdio.h>

int a[10][10], b[10][10], r1, c1, r2, c2, sp1[50][3], sp2[50][3], tr1[50][3],
  tr2[50][3];

void
display (int y[10][10], int m, int n)
{
  int i, j;
  for (i = 0; i < m; i++)
    {
      for (j = 0; j < n; j++)
	printf ("%d\t", y[i][j]);
      printf ("\n");
    }
}

void
sparse (int x[][10], int u[][3], int v, int w)
{
  int k, l, n = 1, t = 0, i, j;
  u[0][0] = v;
  u[0][1] = w;
  for (k = 0; k < v; k++)
    {
      for (l = 0; l < w; l++)
	if (x[k][l] != 0)
	  {
	    u[n][0] = k;
	    u[n][1] = l;
	    u[n][2] = x[k][l];
	    t++;
	    n++;
	  }
    }
  u[0][2] = t;
  printf ("The tuple form is \n");
  for (i = 0; i < n; i++)
    {
      for (j = 0; j < 3; j++)
	printf ("%d\t", u[i][j]);
      printf ("\n");
    }
}

void
transpose (int sp[][3], int tr[][3])
{
  int i, j, k = 1;
  tr[0][0] = sp[0][1];
  tr[0][1] = sp[0][0];
  tr[0][2] = sp[0][2];

  for (i = 0; i < sp[0][1]; i++)
    {
      for (j = 1; j <= sp[0][2]; j++)
	if (sp[j][1] == i)
	  {
	    tr[k][0] = sp[j][1];
	    tr[k][1] = sp[j][0];
	    tr[k][2] = sp[j][2];
	    k++;
	  }
    }
  printf ("The transpose matrix is \n");
  for (i = 0; i < k; i++)
    {
      for (j = 0; j < 3; j++)
	printf ("%d\t", tr[i][j]);
      printf ("\n");
    }
}

void
sum (int g[][3], int h[][3])
{
  int n1 = g[0][2], n2 = h[0][2], c[50][3], s;
  int i = 1, j = 1, k = 1, m;

  c[0][0] = h[0][0];
  c[0][1] = h[0][1];

  while (i <= n1 && j <= n2)
    {
      if (g[i][0] == h[j][0])
	{
	  if (g[i][1] == h[j][1])
	    {
	      s = g[i][2] + h[j][2];
	      if (s != 0)
		{
		  c[k][0] = h[j][0];
		  c[k][1] = h[j][1];
		  c[k][2] = s;
		  k++;
		}
	      i++;
	      j++;
	    }
	  else if (g[i][1] < h[j][1])
	    {
	      c[k][0] = g[i][0];
	      c[k][1] = g[i][1];
	      c[k][2] = g[i][2];
	      k++;
	      i++;
	    }
	  else if (g[i][1] > h[j][1])
	    {
	      c[k][0] = h[j][0];
	      c[k][1] = h[j][1];
	      c[k][2] = h[j][2];
	      k++;
	      j++;
	    }
	}
      else if (g[i][0] < h[j][0])
	{
	  c[k][0] = g[i][0];
	  c[k][1] = g[i][1];
	  c[k][2] = g[i][2];
	  k++;
	  i++;
	}
      else if (g[i][0] > h[j][0])
	{
	  c[k][0] = h[j][0];
	  c[k][1] = h[j][1];
	  c[k][2] = h[j][2];
	  k++;
	  j++;
	}
    }

/*  if (i <= n1)
    {*/
      for (m = i; m <= n1; m++, k++)
	{
	  c[k][0] = g[m][0];
	  c[k][1] = g[m][1];
	  c[k][2] = g[m][2];
	}
/*    }
  if (j <= n2)
    {*/
      for (m = j; m <= n2; m++, k++)
	{
	  c[k][0] = h[m][0];
	  c[k][1] = h[m][1];
	  c[k][2] = h[m][2];
	}
 //   }
  c[0][2] = k - 1;
  printf ("The sum is \n");
  for (i = 0; i < k; i++)
    {
      for (j = 0; j < 3; j++)
	printf ("%d\t", c[i][j]);
      printf ("\n");
    }
}

void
main ()
{
  int i, j;

  printf ("Enter the size of matrix ");
  scanf ("%d %d", &r1, &c1);
  for (i = 0; i < r1; i++)
    {
      for (j = 0; j < c1; j++)
	{
	  printf ("Enter the element in the first matrix ");
	  scanf ("%d", &a[i][j]);
	}
    }
  r2 = r1;
  c2 = c1;
  for (i = 0; i < r2; i++)
    {
      for (j = 0; j < c2; j++)
	{
	  printf ("Enter the element in the second matrix ");
	  scanf ("%d", &b[i][j]);
	}
    }
  printf ("The first matrix is \n");
  display (a, r1, c1);
  sparse (a, sp1, r1, c1);
  transpose (sp1, tr1);

  printf ("The second matrix is \n");
  display (b, r2, c2);
  sparse (b, sp2, r2, c2);
  transpose (sp2, tr2);

  sum (sp1, sp2);
}

