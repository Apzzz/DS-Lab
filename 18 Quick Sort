//Quicksort

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct student
{
  char name[50];
  float h;
  int w;
} s[10];


void
quick (struct student n[], int l, int f)
{
  int i, j, pivot;
  char temp[50];
  float nh;
  int nw;
  struct student t;

  if (l < f)
    {
      pivot = l;
      i = l;
      j = f;
      while (i < j)
	{
	  while ((strcmp (n[i].name, n[pivot].name)) < 0 && i <= f)
	    i++;
	  while ((strcmp (n[j].name, n[pivot].name)) > 0 && j >= l)
	    j--;
	  if (i < j)
	    {
	      t = n[i];
	      n[i] = n[j];
	      n[j] = t;

	    }
	}
      t = n[pivot];
      n[pivot] = n[j];
      n[j] = t;


      quick (n, l, j - 1);
      quick (n, j + 1, f);
    }
}

void
main ()
{
  int i = 0, n;
  FILE *fp;

  printf ("Contents of original file \n");
  fp = fopen ("original.txt", "r");
  char b[50];
  while (!feof (fp))
    {
      fscanf (fp, "%s %s %f %d", &s[i].name, &b, &s[i].h, &s[i].w);
      strcat (s[i].name, " ");
      strcat (s[i].name, b);
      printf ("Name :%s\tHeight :%.2f\tWeight :%d\n", s[i].name, s[i].h,
	      s[i].w);
      i++;
    }
  n = i;
  fclose (fp);

  quick (s, 0, n - 1);

  fp = fopen ("copy.txt", "w");
  for (i = 0; i < n; i++)
    fwrite (&s[i], sizeof (s[i]), 1, fp);
  fclose (fp);

  printf ("Contents of copy file after sort\n");
  fp = fopen ("copy.txt", "r");
  for (i = 0; i < n; i++)
    {
      fread (&s[i], sizeof (s[i]), 1, fp);
      printf ("Name :%s\tHeight :%.2f\tWeight :%d\n", s[i].name, s[i].h,
	      s[i].w);
    }
  fclose (fp);
}
