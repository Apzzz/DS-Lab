//postfix

#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>

char stack[50];
int t = -1;

void
push (char x)
{
  t++;
  stack[t] = x;
}

int
pop ()
{
  return stack[t--];
}

int
priority (char a)
{
  if (a == '+' || a == '-')
    return 1;
  else if (a == '*' || a == '/')
    return 2;
  else if (a == '^')
    return 3;
  else
    return 0;
}

void
convert (char *infix, char *postfix)
{
  char ch;
  int del, k = 0;
  for (int i = 0; i < strlen (infix); i++)
    {
      ch = infix[i];

      if (ch == '(')
	push (ch);
      else if (isalnum (ch))
	{
	  postfix[k] = ch;
	  k++;
	}
      else if (ch == ')')
	{
	  while (stack[t] != '(')
	    postfix[k++] = pop ();
	  del = pop ();
	}
      else
	{
	  while (priority (stack[t]) >= priority (ch))
	    postfix[k++] = pop ();
	  push (ch);
	}
    }
  while (t != -1)
    postfix[k++] = pop ();
  postfix[k] = '\0';
}

int
evaluate (char *postfix)
{
  char ch;
  int o1, o2;
  for (int i = 0; i < strlen (postfix); i++)
    {
      ch = postfix[i];
      if (isdigit (ch))
	push (ch-'0');
      else
	{
	  o2 = pop ();
	  o1 = pop ();
	  switch (ch)
	    {
	    case '+':
	      push (o1 + o2);
	      break;
	    case '-':
	      push (o1 - o2);
	      break;
	    case '*':
	      push (o1 * o2);
	      break;
	    case '/':
	      push (o1 / o2);
	      break;
	    case '^':
	      push (pow (o1, o2));
	      break;
	    }
	}
    }
  return stack[t];
}

void
main ()
{
  char infix[50], postfix[50], r;
  printf ("Enter the infix expression ");
  gets (infix);
  convert (infix, postfix);
  printf ("The postfix expression is %s \n", postfix);
  r = evaluate (postfix);
  printf ("The evaluated result is %i \n", r);

}
