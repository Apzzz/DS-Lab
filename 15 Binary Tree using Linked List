//Binarytree using linked list
//Author: APARNA DINESH

#include<stdio.h>
#include<stdlib.h>
struct node
{
  struct node *lc;
  int data;
  struct node *rc;
};
struct node *root,*rcptr,*lcptr,*parent,*ptr,*ptr1,*t3;
int item, top,flag;

struct node* stack[100];

void creation(struct node* ptr,int item)
{
  int newl;
  char option;
  if(ptr!=NULL)
  {
    ptr->data=item;
    printf("Does the node %d have left subtree? ",item);
    scanf(" %c",&option);
    if(option=='Y' || option=='y')
    {
      lcptr=malloc(sizeof(struct node));
      ptr->lc=lcptr;
      printf("Enter the item to be inserted ");
      scanf("%d",&newl);
      creation(lcptr,newl);
    }
    else
      ptr->lc=NULL;
    printf("Does the node %d have right subtree? ",item);
    scanf(" %c",&option);
    if(option=='Y' || option=='y')
    {
      rcptr=malloc(sizeof(struct node));
      ptr->rc=rcptr;
      printf("Enter the item to be inserted ");
      scanf("%d",&newl);
      creation(rcptr,newl);
    }
    else
    ptr->rc=NULL;
  }
}

void push(struct node* ptr)
{
  top=top+1;
  stack[top]=ptr;
}

struct node* pop()
{
  if(top!=-1)
  {
    ptr=stack[top];
    top=top-1;
    return ptr;
  }
}

void inorder(struct node* ptr1)
{
  if (ptr1!= NULL)
  {
    inorder(ptr1->lc);
    printf("%d ", ptr1->data);
    inorder(ptr1->rc);
  }
}

void preorder(struct node* ptr1)
{
  if (ptr1!= NULL)
  {
    printf("%d ", ptr1->data);
    preorder(ptr1->lc);
    preorder(ptr1->rc);
  }
}

void postorder(struct node* ptr1)
{
  if (ptr1!=NULL)
  {
    postorder(ptr1->lc);
    postorder(ptr1->rc);
    printf("%d ", ptr1->data);
  }
}

void display(struct node* ptr1)
{
  if(ptr1==NULL)
    printf("\nTree is empty\n");
  else
  {
    printf("\nInorder traversal:\n");
    inorder(ptr1);
    printf("\nPreorder traversal:\n");
    preorder(ptr1);
    printf("\nPostorder traversal:\n");
    postorder(ptr1);
  }
  printf("\n\n");
}

int
small (struct node *t2)
{
    t3=t2;
  while (t2->lc != NULL)
    {
      t3 = t2;
      t2 = t2->lc;
    }
    if(t3!=t2)
  t3->lc = NULL;
  return t2->data;
}

struct node* search_parent(struct node* ptr,int item)
{
  struct node *ptr3,*ptr4;
  top=-1;
  flag=0;
  push(ptr);
  while(ptr->data!=item)
  {
    ptr=pop();
    if(ptr!=NULL)
    {
      ptr3=ptr->lc;
      ptr4=ptr->rc;
      if(ptr->data==item)
      {
        flag=1;
        break;
      }
      if(ptr3!=NULL)
      {
        parent=ptr;
        push(ptr3);
      }
      if(ptr4!=NULL)
      {
        parent=ptr;
        push(ptr4);
      }
    }
  }
  if(flag==0)
    return NULL;
  else
    return parent;
}

void deletion(int item)
{
  struct node *c;
  ptr=root;
  if(ptr==NULL)
    printf("Tree is empty");
  else 
  {
    if(ptr->rc==NULL&&ptr->lc==NULL)
    {
        if(ptr->data==item)
        {
      root->data=0;
      ptr1=NULL;
      return;
        }
        else
        printf("%d not found in the tree \n",item);
    }
    parent=search_parent(ptr,item);
    
    if(parent==NULL)
      printf("\nParent node not found\n");
    else
    {
        printf("%d - parent\n",parent->data);
      if(parent->lc!=NULL)
      {
        c=parent->lc;
        if(c->data==item)
        {
         /* parent->lc=NULL;
          c->data=0;
          c->lc=NULL;
          c->rc=NULL;
          free(c);*/
          printf("%d deleted\n",c->data);
          if(c->lc==NULL&&c->rc==NULL)
          {
              parent->lc=NULL;
              free(c);
          }
          else if(c->lc==NULL)
          {
              parent->lc=c->rc;
              free(c);
          }
          else if(c->rc==NULL)
          {
              parent->lc=c->lc;
              free(c);
          }
          else
          {
              int k;
              k = small (c->rc);
	          c->data = k;
	          if(c->data==c->rc->data)
	          c->rc=NULL;
          }
        }
      }
      if(parent->rc!=NULL)
      {
        c=parent->rc;
        if(c->data==item)
        {
        /*  parent->rc=NULL;
          c->data=0;
          c->lc=NULL;
          c->rc=NULL;*/
          printf("%d deleted\n",c->data);
           if(c->lc==NULL&&c->rc==NULL)
          {
              parent->rc=NULL;
              free(c);
          }
          else if(c->lc==NULL)
          {
              parent->rc=c->rc;
              free(c);
          }
          else if(c->rc==NULL)
          {
              parent->rc=c->lc;
              free(c);
          }
          else
          {
              int k;
              k = small (c->rc);
	          c->data = k;
	          if(c->data==c->rc->data)
	          c->rc=NULL; 
          }
         
        }
      }
      
    }
  }
}  

void main()
{
  int choice,k=0;
  root=malloc(sizeof(struct node));
  root->lc=NULL;
  root->rc=NULL;
  while(k==0)
  {
    printf("Enter your choice \n");
    printf("1 Create tree \n2 Delete \n3 Display \n4 Exit  ");
    scanf("%d",&choice);
    switch(choice)
    {
      case 1:
        printf("Enter the data of root node ");
        scanf("%d",&item);
        creation(root,item);
        ptr1=root;
        break;

      case 2: 
        if(ptr1!=NULL)
        {
          printf("Enter the item to be deleted ");
          scanf("%d",&item);
          deletion(item);
        }
        else
          printf("\nTree not created\n");
        break;

      case 3:
        display(ptr1);
        break;

      case 4: 
        exit(0);

      default: printf("\nInvalid choice\n");
    }
  }
}
